PROGRAM = DATA.read.split(?,).map(&:to_i).freeze

class IntCode

  def initialize(mem, input = [])
    @pc = 0
    @base = 0
    @input = input
    @mem = mem.map.with_index { |m, i| [i, m] }.to_h
    @mem.default = 0
  end

  def read(address, mode)
    case mode.to_i
    when 0 then @mem[@mem[address]]
    when 1 then @mem[address]
    when 2 then @mem[@mem[address] + @base]
    end
  end

  def write(address, mode, value)
    case mode.to_i
    when 0 then @mem[@mem[address]] = value
    when 2 then @mem[@mem[address] + @base] = value
    end
  end

  def run
    loop do
      mode, opcode = @mem[@pc].divmod(100)
      m = mode.digits
      a = read(@pc + 1, m[0])
      b = read(@pc + 2, m[1])

      case opcode
      when 1
        write(@pc + 3, m[2], a + b)
        @pc += 4
      when 2
        write(@pc + 3, m[2], a * b)
        @pc += 4
      when 3
        write(@pc + 1, m[0], @input.shift)
        @pc += 2
      when 4
        @pc += 2
        return a
      when 5
        a != 0 ? @pc = b : @pc += 3
      when 6
        a == 0 ? @pc = b : @pc += 3
      when 7
        write(@pc + 3, m[2], a < b ? 1 : 0)
        @pc += 4
      when 8
        write(@pc + 3, m[2], a == b ? 1 : 0)
        @pc += 4
      when 9
        @base += a
        @pc += 2
      when 99
        return
      else
        throw "Unknown opcode: #{opcode}"
      end
    end
  end

end

def in_beam?(x, y)
  IntCode.new(PROGRAM, [x, y]).run == 1
end

p (0..49).sum { |y| (0..49).count { |x| in_beam?(x, y) }}

x = 0

p 1000.step { |y|
  x = (x..).find { |xx| in_beam?(xx, y) }
  break x * 10000 + y - 99 if in_beam?(x + 99, y - 99)
}

__END__
109,424,203,1,21102,1,11,0,1105,1,282,21101,18,0,0,1106,0,259,2101,0,1,221,203,1,21102,1,31,0,1106,0,282,21101,0,38,0,1106,0,259,21002,23,1,2,22102,1,1,3,21101,0,1,1,21102,57,1,0,1106,0,303,2102,1,1,222,21002,221,1,3,21002,221,1,2,21101,0,259,1,21101,0,80,0,1105,1,225,21101,123,0,2,21101,91,0,0,1105,1,303,1201,1,0,223,20101,0,222,4,21101,259,0,3,21102,225,1,2,21101,0,225,1,21102,118,1,0,1105,1,225,21001,222,0,3,21102,58,1,2,21101,133,0,0,1105,1,303,21202,1,-1,1,22001,223,1,1,21102,1,148,0,1106,0,259,1201,1,0,223,20101,0,221,4,21002,222,1,3,21101,20,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,105,1,109,20207,1,223,2,20102,1,23,1,21101,-1,0,3,21102,214,1,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,22102,1,-3,1,22102,1,-2,2,22101,0,-1,3,21101,250,0,0,1105,1,225,21202,1,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21201,-2,0,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21102,1,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21201,1,0,-4,109,-5,2105,1,0
