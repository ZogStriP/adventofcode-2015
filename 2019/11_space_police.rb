program = DATA.read.split(?,).map(&:to_i)

class IntCode

  def initialize(mem, input: [])
    @pc = 0
    @base = 0
    @input = input
    @mem = mem.map.with_index { |m, i| [i, m] }.to_h
    @mem.default = 0
  end

  def read(address, mode)
    case mode.to_i
    when 0 then @mem[@mem[address]]
    when 1 then @mem[address]
    when 2 then @mem[@mem[address] + @base]
    end
  end

  def write(address, mode, value)
    case mode.to_i
    when 0 then @mem[@mem[address]] = value
    when 2 then @mem[@mem[address] + @base] = value
    end
  end

  def run(input = nil)
    @input.push(input) if input

    loop do
      mode, opcode = @mem[@pc].divmod(100)
      m = mode.digits
      a = read(@pc + 1, m[0])
      b = read(@pc + 2, m[1])

      case opcode
      when 1
        write(@pc + 3, m[2], a + b)
        @pc += 4
      when 2
        write(@pc + 3, m[2], a * b)
        @pc += 4
      when 3
        write(@pc + 1, m[0], @input.shift)
        @pc += 2
      when 4
        @pc += 2
        return a
      when 5
        a != 0 ? @pc = b : @pc += 3
      when 6
        a == 0 ? @pc = b : @pc += 3
      when 7
        write(@pc + 3, m[2], a < b ? 1 : 0)
        @pc += 4
      when 8
        write(@pc + 3, m[2], a == b ? 1 : 0)
        @pc += 4
      when 9
        @base += a
        @pc += 2
      when 99
        return
      end
    end
  end

end

DIR = [
  [ 0, -1],
  [ 1,  0],
  [ 0,  1],
  [-1,  0],
]

def paint(program, start_color)
  d = 0
  p = [0, 0]
  grid = Hash.new(0)
  grid[p] = start_color
  robot = IntCode.new(program.dup)

  loop {
    color, dir = robot.run(grid[p]), robot.run
    break if color.nil? || dir.nil?
    grid[p] = color
    d = (dir == 0 ? d - 1 : d + 1) % DIR.size
    p = [p[0] + DIR[d][0], p[1] + DIR[d][1]]
  }

  grid
end

p paint(program, 0).keys.size

grid = paint(program, 1)
xs, ys = grid.keys.transpose

Range.new(*ys.minmax).each { |y|
  puts Range.new(*xs.minmax).map { |x|
    grid[[x, y]] == 1 ? "â–ˆ" : " "
  }.join
}

__END__
3,8,1005,8,305,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,29,3,8,102,-1,8,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,50,1,104,20,10,1,1102,6,10,1006,0,13,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,83,1,1102,0,10,1006,0,96,2,1004,19,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,101,0,8,116,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,102,1,8,138,1006,0,60,1,1008,12,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,102,1,8,168,1006,0,14,1006,0,28,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,101,0,8,195,2,1005,9,10,1006,0,29,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,1002,8,1,224,2,1009,8,10,1,3,5,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,254,3,8,102,-1,8,10,1001,10,1,10,4,10,1008,8,0,10,4,10,1002,8,1,277,1,1003,18,10,1,1104,1,10,101,1,9,9,1007,9,957,10,1005,10,15,99,109,627,104,0,104,1,21101,0,666681062292,1,21102,322,1,0,1105,1,426,21101,847073883028,0,1,21102,333,1,0,1105,1,426,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,0,179356855319,1,21102,1,380,0,1105,1,426,21102,1,179356998696,1,21102,1,391,0,1105,1,426,3,10,104,0,104,0,3,10,104,0,104,0,21101,0,988669698816,1,21101,0,414,0,1106,0,426,21102,1,868494500628,1,21102,425,1,0,1106,0,426,99,109,2,21202,-1,1,1,21102,1,40,2,21102,457,1,3,21102,1,447,0,1105,1,490,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,452,453,468,4,0,1001,452,1,452,108,4,452,10,1006,10,484,1102,0,1,452,109,-2,2105,1,0,0,109,4,1201,-1,0,489,1207,-3,0,10,1006,10,507,21102,0,1,-3,22101,0,-3,1,21202,-2,1,2,21101,1,0,3,21102,1,526,0,1106,0,531,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,554,2207,-4,-2,10,1006,10,554,22101,0,-4,-4,1106,0,622,21201,-4,0,1,21201,-3,-1,2,21202,-2,2,3,21102,573,1,0,1106,0,531,21202,1,1,-4,21101,1,0,-1,2207,-4,-2,10,1006,10,592,21102,1,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,614,22101,0,-1,1,21102,614,1,0,105,1,489,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2105,1,0
